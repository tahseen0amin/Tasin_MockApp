//
//  PushNotificationViewController.m
//  MySampleApp
//
//
// Copyright 2015 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//

//

#import "PushNotificationViewController.h"
#import "AWSPushManager.h"
#import "AWSConfiguration.h"

@interface PushNotificationViewController() <AWSPushManagerDelegate, AWSPushTopicDelegate>

@end

@implementation PushNotificationViewController

#pragma mark - View lifecycle

- (void)viewDidLoad {
    [super viewDidLoad];
    AWSPushManager *pushManager = [AWSPushManager defaultPushManager];
    pushManager.delegate = self;
    self.pushNotificationSwitch.on = pushManager.isEnabled;
    [pushManager registerTopicARNs:@[AWS_SNS_ALL_DEVICE_TOPIC_ARN, ]];
}

#pragma mark - IBActions

- (IBAction)toggleSwitch:(UISwitch *)sender {
    if (sender.on) {
        // Ask the user for permissions to receive push notifications.
        [[AWSPushManager defaultPushManager] registerForPushNotifications];
    } else {
        // Unsubsrcibe from all topics.
        UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Please Confirm"
                                                                                 message:@"Do you want to disable Push Notification?"
                                                                          preferredStyle:UIAlertControllerStyleAlert];

        UIAlertAction *unsubscribeAction = [UIAlertAction actionWithTitle:@"Disable"
                                                                    style:UIAlertActionStyleDefault
                                                                  handler:^(UIAlertAction * _Nonnull action) {
                                                                      [[AWSPushManager defaultPushManager] disablePushNotifications];
                                                                  }];
        [alertController addAction:unsubscribeAction];

        UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@"Cancel"
                                                               style:UIAlertActionStyleCancel
                                                             handler:^(UIAlertAction * _Nonnull action) {
                                                                 AWSLogInfo(@"The user canceled disabling an endpoint.");
                                                                 self.pushNotificationSwitch.on = YES;
                                                             }];
        [alertController addAction:cancelAction];

        [self presentViewController:alertController
                           animated:YES
                         completion:nil];
    }
}

#pragma mark - AWSPushNotificationDelegate

- (void)pushManagerDidRegister:(AWSPushManager *)pushManager {
    AWSLogInfo(@"Successfully enabled Push Notification.");

    AWSPushTopic *topic = [pushManager topicForTopicARN:AWS_SNS_ALL_DEVICE_TOPIC_ARN];
    [topic subscribe];
}

- (void)pushManager:(AWSPushManager *)pushManager
didFailToRegisterWithError:(NSError *)error {
    AWSLogError(@"Failed to enable Push Notifications: %@", error);

    self.pushNotificationSwitch.on = NO;
    [self showAlertWithTitle:@"Error"
                     message:@"Failed to enable Push Notifications."];
}

- (void)pushManagerDidDisable:(AWSPushManager *)pushManager {
    AWSLogInfo(@"Successfully disabled Push Notifications.");

    [self.tableView reloadData];
}

- (void)pushManager:(AWSPushManager *)pushManager
didFailToDisableWithError:(NSError *)error {
    AWSLogError(@"Failed to disable Push Notifications: %@", error);

    [self showAlertWithTitle:@"Error"
                     message:@"Failed to unsubscribe from all of the topics."];
}

#pragma mark - AWSPushNotificationTopicDelegate

- (void)topicDidSubscribe:(AWSPushTopic *)topic {
    AWSLogInfo(@"Successfully subscribed to a topic: %@", topic);

    [self.tableView reloadData];
}

- (void)topic:(AWSPushTopic *)topic
didFailToSubscribeWithError:(NSError *)error {
    AWSLogError(@"Failed to subscribe to a topic: %@", error);

    [self showAlertWithTitle:@"Error"
                     message:[NSString stringWithFormat:@"Failed to subscribe to '%@'.", topic.topicName]];
}

- (void)topicDidUnsubscribe:(AWSPushTopic *)topic {
    AWSLogInfo(@"Successfully unsubscribed to a topic: %@", topic);

    [self.tableView reloadData];
}

- (void)topic:(AWSPushTopic *)topic
didFailToUnsubscribeWithError:(NSError *)error {
    AWSLogError(@"Failed to unsubscribe to a topic: %@", error);

    [self showAlertWithTitle:@"Error"
                     message:[NSString stringWithFormat:@"Failed to unsubscribe from '%@'.", topic.topicName]];
}

#pragma mark - UITableViewDataSource

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    static NSString *cellIdentifier = @"AWSPushNotificationViewCell";
    UITableViewCell *cell = (UITableViewCell *)[tableView dequeueReusableCellWithIdentifier:cellIdentifier
                                                                               forIndexPath:indexPath];
    AWSPushTopic *topic = [AWSPushManager defaultPushManager].topics[indexPath.row];
    cell.textLabel.text = topic.topicName;
    cell.detailTextLabel.text = topic.topicARN;
    cell.accessoryType = topic.isSubscribed ? UITableViewCellAccessoryCheckmark : UITableViewCellAccessoryNone;

    return cell;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    return [AWSPushManager defaultPushManager].topics.count;
}

#pragma mark - UITableViewDelegate

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
    [tableView deselectRowAtIndexPath:indexPath
                             animated:YES];

    AWSPushManager *pushManager = [AWSPushManager defaultPushManager];

    if (pushManager.isEnabled) {
        AWSPushTopic *topic = pushManager.topics[indexPath.row];
        if (topic.isSubscribed) {
            // Unsubscribe
            UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Please Confirm"
                                                                                     message:@"Do you want to unsubscribe from the topic?"
                                                                              preferredStyle:UIAlertControllerStyleAlert];

            UIAlertAction *unsubscribeAction = [UIAlertAction actionWithTitle:@"Unsubscribe"
                                                                        style:UIAlertActionStyleDefault
                                                                      handler:^(UIAlertAction * _Nonnull action) {
                                                                          AWSPushTopic *topic = [AWSPushManager defaultPushManager].topics[indexPath.row];
                                                                          [topic unsubscribe];
                                                                      }];
            [alertController addAction:unsubscribeAction];

            UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@"Cancel"
                                                                   style:UIAlertActionStyleCancel
                                                                 handler:nil];
            [alertController addAction:cancelAction];

            [self presentViewController:alertController
                               animated:YES
                             completion:nil];
        } else {
            // Subscribe
            [topic subscribe];
        }
    }
}

- (BOOL)tableView:(UITableView *)tableView shouldHighlightRowAtIndexPath:(NSIndexPath *)indexPath {
    AWSPushManager *pushManager = [AWSPushManager defaultPushManager];
    if (!pushManager.isEnabled) {
        return NO;
    }

    return YES;
}

#pragma mark - Utility methods

- (void)showAlertWithTitle:(NSString *)title
                   message:(NSString *)message {
    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:title
                                                                             message:message
                                                                      preferredStyle:UIAlertControllerStyleAlert];
    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@"OK"
                                                           style:UIAlertActionStyleDefault
                                                         handler:nil];
    [alertController addAction:cancelAction];

    [self presentViewController:alertController
                       animated:YES
                     completion:nil];
}

@end
