//
//  AWSUserFilesViewController.m
//  MySampleApp
//
//
// Copyright 2015 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//

#import "UserFilesViewController.h"

#import <MediaPlayer/MediaPlayer.h>
#import "AWSUserFileManager.h"
#import "AWSIdentityManager.h"
#import "AWSConfiguration.h"

NSString *const UserFilesPublicDirectoryName = @"public";
NSString *const UserFilesPrivateDirectoryName = @"private";

@interface UserFilesViewController () <UINavigationControllerDelegate, UIImagePickerControllerDelegate>

@property (nonatomic, strong) AWSUserFileManager *manager;

@property (nonatomic, strong) NSArray *contents;
@property (nonatomic, strong) NSDateFormatter *dateFormatter;

@property (nonatomic, strong) NSString *marker;
@property (nonatomic, assign) BOOL didLoadAllContents;

@end

@interface NSString (UserFilesViewController)

+ (NSString *)aws_stringFromByteCount:(NSUInteger)byteCount;

@end

@implementation UserFilesViewController

#pragma mark - View lifecycle

- (void)viewDidLoad {
    [super viewDidLoad];

    self.manager = [AWSUserFileManager sharedManager];

    // Sets up the UIs.
    self.navigationItem.rightBarButtonItem = [[UIBarButtonItem alloc] initWithBarButtonSystemItem:UIBarButtonSystemItemAction
                                                                                           target:self
                                                                                           action:@selector(showContentManagerActionOptions:)];
    // Sets up the date formatter.
    self.dateFormatter = [NSDateFormatter new];
    self.dateFormatter.dateStyle = kCFDateFormatterShortStyle;
    self.dateFormatter.timeStyle = kCFDateFormatterShortStyle;
    self.dateFormatter.locale = [NSLocale currentLocale];

    self.tableView.estimatedRowHeight = self.tableView.rowHeight;
    self.tableView.rowHeight = UITableViewAutomaticDimension;

    if (!self.prefix) {
        self.prefix = [NSString stringWithFormat:@"%@/", UserFilesPublicDirectoryName];
    }

    [self updateUserInterface];
    [self loadMoreContents];
}

- (void)updateUserInterface {
    self.cacheLimitLabel.text = [NSString aws_stringFromByteCount:self.manager.maxCacheSize];
    self.currentCacheSizeLabel.text = [NSString aws_stringFromByteCount:self.manager.cachedUsedSize];
    self.availableCacheSizeLabel.text = [NSString aws_stringFromByteCount:self.manager.maxCacheSize - self.manager.cachedUsedSize];
    self.pinnedCacheSizeLabel.text = [NSString aws_stringFromByteCount:self.manager.pinnedSize];

    if (self.prefix) {
        if ([self.prefix hasPrefix:UserFilesPublicDirectoryName]) {
            self.pathLabel.text = [NSString stringWithFormat:@"%@", [self.prefix substringFromIndex:UserFilesPublicDirectoryName.length]];
        }
        if ([self.prefix hasPrefix:UserFilesPrivateDirectoryName]) {
            NSString *userId = [AWSIdentityManager sharedInstance].identityId;
            self.pathLabel.text = [NSString stringWithFormat:@"%@", [self.prefix substringFromIndex:UserFilesPrivateDirectoryName.length + userId.length + 1]];
        }
    } else {
        self.pathLabel.text = @"/";
    }

    [self.tableView reloadData];
}

#pragma mark - Content Manager user action methods

- (IBAction)changeDirectory:(UISegmentedControl *)sender {
    switch (sender.selectedSegmentIndex) {
        case 0: // Public directory
            self.manager = [AWSUserFileManager sharedManager];
            self.prefix = [NSString stringWithFormat:@"%@/", UserFilesPublicDirectoryName];
            break;
        case 1: { // Private directory
            if ([[AWSIdentityManager sharedInstance] isLoggedIn]) {
                self.manager = [AWSUserFileManager sharedManager];
                NSString *userId = [AWSIdentityManager sharedInstance].identityId;
                self.prefix = [NSString stringWithFormat:@"%@/%@/", UserFilesPrivateDirectoryName, userId];
            } else {
                sender.selectedSegmentIndex = 0;
                __weak UserFilesViewController *weakSelf = self;
                UIAlertController *alertController = [UIAlertController alertControllerWithTitle:nil
                                                                                         message:@"Private user file storage is only available to users who are signed-in. Would you like to sign in?"
                                                                                  preferredStyle:UIAlertControllerStyleAlert];
                UIAlertAction *signInAction = [UIAlertAction actionWithTitle:@"Sign In"
                                                                       style:UIAlertActionStyleDefault
                                                                     handler:^(UIAlertAction * _Nonnull action) {
                                                                         UIStoryboard *loginStoryboard = [UIStoryboard storyboardWithName:@"SignIn"
                                                                                                                                   bundle:nil];
                                                                         UIViewController *loginController = [loginStoryboard instantiateViewControllerWithIdentifier:@"SignIn"];
                                                                         [weakSelf.navigationController pushViewController:loginController
                                                                                                                  animated:YES];
                                                                     }];
                [alertController addAction:signInAction];

                UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@"Cancel"
                                                                       style:UIAlertActionStyleCancel
                                                                     handler:nil];
                [alertController addAction:cancelAction];

                [self presentViewController:alertController
                                   animated:YES
                                 completion:nil];
            }

            break;
        }

        default:
            break;
    }

    self.contents = [NSArray new];
    [self loadMoreContents];
}

- (void)showContentManagerActionOptions:(id)sender {
    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:nil
                                                                             message:nil
                                                                      preferredStyle:UIAlertControllerStyleActionSheet];

    __weak UserFilesViewController *weakSelf = self;
    UIAlertAction *uploadObjectAction = [UIAlertAction actionWithTitle:@"Upload"
                                                                 style:UIAlertActionStyleDefault
                                                               handler:^(UIAlertAction *action) {
                                                                   [weakSelf showImagePicker];
                                                               }];
    [alertController addAction:uploadObjectAction];

    UIAlertAction *createFolderAction = [UIAlertAction actionWithTitle:@"New Folder"
                                                                 style:UIAlertActionStyleDefault
                                                               handler:^(UIAlertAction *action) {
                                                                   [weakSelf askForDirectoryName];
                                                               }];
    [alertController addAction:createFolderAction];

    UIAlertAction *refreshAction = [UIAlertAction actionWithTitle:@"Refresh"
                                                            style:UIAlertActionStyleDefault
                                                          handler:^(UIAlertAction *action) {
                                                              [weakSelf refreshContents];
                                                          }];
    [alertController addAction:refreshAction];

    UIAlertAction *downloadObjectsAction = [UIAlertAction actionWithTitle:@"Download Recent"
                                                                    style:UIAlertActionStyleDefault
                                                                  handler:^(UIAlertAction *action) {
                                                                      [weakSelf downloadObjectsToFillCache];
                                                                  }];
    [alertController addAction:downloadObjectsAction];

    UIAlertAction *changeLimitAction = [UIAlertAction actionWithTitle:@"Set Cache Size"
                                                                style:UIAlertActionStyleDefault
                                                              handler:^(UIAlertAction *action) {
                                                                  [weakSelf showDiskLimitOptions];
                                                              }];
    [alertController addAction:changeLimitAction];



    UIAlertAction *removeAllObjectsAction = [UIAlertAction actionWithTitle:@"Clear Cache"
                                                                     style:UIAlertActionStyleDestructive
                                                                   handler:^(UIAlertAction *action) {
                                                                       [weakSelf.manager clearCache];
                                                                       [weakSelf updateUserInterface];
                                                                   }];
    [alertController addAction:removeAllObjectsAction];

    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@"Cancel"
                                                           style:UIAlertActionStyleCancel
                                                         handler:nil];
    [alertController addAction:cancelAction];

    [self presentViewController:alertController
                       animated:YES
                     completion:nil];
}

- (void)refreshContents {
    self.marker = nil;
    [self loadMoreContents];
}

- (void)loadMoreContents {
    __weak UserFilesViewController *weakSelf = self;
    [self.manager listAvailableContentsWithPrefix:self.prefix
                                           marker:self.marker
                                completionHandler:^(NSArray *contents, NSString *nextMarker, NSError *error) {
                                    if (error) {
                                        [weakSelf showSimpleAlertWithTitle:@"Error"
                                                                   message:@"Failed to load the list of contents."
                                                         cancelButtonTitle:@"Okay"];
                                        NSLog(@"Failed to load the list of contents. %@", error);
                                    }
                                    if (contents.count > 0) {
                                        weakSelf.contents = contents;

                                        weakSelf.didLoadAllContents = !nextMarker;
                                        weakSelf.marker = nextMarker;
                                    }
                                    [weakSelf updateUserInterface];
                                }];
}

- (void)showDiskLimitOptions {
    __weak UserFilesViewController *weakSelf = self;
    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Disk Cache Size"
                                                                             message:nil
                                                                      preferredStyle:UIAlertControllerStyleActionSheet];

    for (NSNumber *number in @[@1, @5, @20, @50, @100]) {
        UIAlertAction *byteLimitOptionAction = [UIAlertAction actionWithTitle:[NSString stringWithFormat:@"%@ MB", number]
                                                                        style:UIAlertActionStyleDefault
                                                                      handler:^(UIAlertAction *action) {
                                                                          weakSelf.manager.maxCacheSize = [number unsignedIntegerValue] * 1024 * 1024;
                                                                          [weakSelf updateUserInterface];
                                                                      }];
        [alertController addAction:byteLimitOptionAction];
    }

    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@"Cancel"
                                                           style:UIAlertActionStyleCancel
                                                         handler:nil];
    [alertController addAction:cancelAction];

    [self presentViewController:alertController
                       animated:YES
                     completion:nil];
}

- (void)downloadObjectsToFillCache {
    __weak UserFilesViewController *weakSelf = self;
    [self.manager listRecentContentsWithPrefix:self.prefix
                                    completionHandler:^(id result, NSError *error) {
                                        for (AWSContent *content in result) {
                                            if (!content.isCached
                                                && !content.isDirectory) {
                                                [weakSelf downloadContent:content
                                                          pinOnCompletion:NO];
                                            }
                                        }
                                    }];
}

#pragma mark - Content user action methods

- (void)showActionOptionsForContent:(AWSContent *)content {
    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:nil
                                                                             message:nil
                                                                      preferredStyle:UIAlertControllerStyleActionSheet];
    __weak UserFilesViewController *weakSelf = self;

    if (content.isCached) {
        UIAlertAction *openAction = [UIAlertAction actionWithTitle:@"Open"
                                                             style:UIAlertActionStyleDefault
                                                           handler:^(UIAlertAction *action) {
                                                               dispatch_async(dispatch_get_main_queue(), ^{
                                                                   [weakSelf openContent:content];
                                                               });
                                                           }];
        [alertController addAction:openAction];
    }

    // If the content hasn't been downloaded, and it's larger than the limit of the cache,
    // we don't allow downloading the contentn.
    if (content.knownRemoteByteCount + 4 * 1024 < self.manager.maxCacheSize) { // 4 KB is for local metadata.
        NSString *title = @"Download";
        if ([content.knownRemoteLastModifiedDate compare:content.downloadedDate] == NSOrderedDescending) {
            title = @"Download Latest Version";
        }
        UIAlertAction *downloadAction = [UIAlertAction actionWithTitle:title
                                                                 style:UIAlertActionStyleDefault
                                                               handler:^(UIAlertAction *action) {
                                                                   [weakSelf downloadContent:content
                                                                             pinOnCompletion:NO];
                                                               }];
        [alertController addAction:downloadAction];
    }

    UIAlertAction *downloadAndPinAction = [UIAlertAction actionWithTitle:@"Download & Pin"
                                                                   style:UIAlertActionStyleDefault
                                                                 handler:^(UIAlertAction *action) {
                                                                     [weakSelf downloadContent:content
                                                                               pinOnCompletion:YES];
                                                                 }];
    [alertController addAction:downloadAndPinAction];

    if (content.isCached) {
        if (content.isPinned) {
            UIAlertAction *unpinAction = [UIAlertAction actionWithTitle:@"Unpin"
                                                                  style:UIAlertActionStyleDefault
                                                                handler:^(UIAlertAction *action) {
                                                                    [content unPin];
                                                                    [weakSelf updateUserInterface];
                                                                }];
            [alertController addAction:unpinAction];
        } else {
            UIAlertAction *pinAction = [UIAlertAction actionWithTitle:@"Pin"
                                                                style:UIAlertActionStyleDefault
                                                              handler:^(UIAlertAction *action) {
                                                                  [content pin];
                                                                  [weakSelf updateUserInterface];
                                                              }];
            [alertController addAction:pinAction];
        }

        UIAlertAction *removeAction = [UIAlertAction actionWithTitle:@"Delete Local Copy"
                                                               style:UIAlertActionStyleDestructive
                                                             handler:^(UIAlertAction *action) {
                                                                 [content removeLocal];
                                                                 [weakSelf updateUserInterface];
                                                             }];
        [alertController addAction:removeAction];
    }

    UIAlertAction *removeFromRemoteAction = [UIAlertAction actionWithTitle:@"Delete Remote File"
                                                                     style:UIAlertActionStyleDestructive
                                                                   handler:^(UIAlertAction * _Nonnull action) {
                                                                       [weakSelf confirmForRemovingContent:content];
                                                                   }];
    [alertController addAction:removeFromRemoteAction];

    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@"Cancel"
                                                           style:UIAlertActionStyleCancel
                                                         handler:nil];
    [alertController addAction:cancelAction];

    [self presentViewController:alertController
                       animated:YES
                     completion:nil];
}

- (void)downloadContent:(AWSContent *)content
        pinOnCompletion:(BOOL)pinOnCompletion {
    __weak UserFilesViewController *weakSelf = self;
    [content downloadWithDownloadType:AWSContentDownloadTypeIfNewerExists
                      pinOnCompletion:pinOnCompletion
                        progressBlock:^(AWSContent *content, NSProgress *progress) {
                            if ([weakSelf.contents containsObject:content]) {
                                NSInteger row = [weakSelf.contents indexOfObject:content];
                                NSIndexPath *indexPath = [NSIndexPath indexPathForRow:row
                                                                            inSection:1];
                                [weakSelf.tableView reloadRowsAtIndexPaths:@[indexPath]
                                                          withRowAnimation:UITableViewRowAnimationNone];
                            }
                        } completionHandler:^(AWSContent *content, NSData *data, NSError *error) {
                            if (error) {
                                NSLog(@"Failed to download a content from a server. %@", error);
                                [weakSelf showSimpleAlertWithTitle:@"Error"
                                                           message:@"Failed to download a content from a server."
                                                 cancelButtonTitle:@"Okay"];
                            }

                            [weakSelf updateUserInterface];
                        }];
}

- (void)openContent:(AWSContent *)content {
    if ([content.key hasSuffix:@".mov"]
        || [content.key hasSuffix:@".m4p"]
        || [content.key hasSuffix:@".m4v"]
        || [content.key hasSuffix:@".mp4"]
        || [content.key hasSuffix:@".mpv"]
        || [content.key hasSuffix:@".3gp"]
        || [content.key hasSuffix:@".mp3"]) { // Video and sound files
        NSArray *directories = NSSearchPathForDirectoriesInDomains(NSCachesDirectory, NSUserDomainMask, YES);
        NSString *cacheDirectoryPath = [directories firstObject];
        NSURL *movieURL = [NSURL fileURLWithPath:[cacheDirectoryPath stringByAppendingPathComponent:content.key]];
        [content.cachedData writeToURL:movieURL atomically:YES];

        MPMoviePlayerViewController *controller = [[MPMoviePlayerViewController alloc]initWithContentURL:movieURL];
        [controller.moviePlayer prepareToPlay];
        [controller.moviePlayer play];

        [self presentMoviePlayerViewControllerAnimated:controller];
    } else if ([content.key hasSuffix:@".jpg"]
               || [content.key hasSuffix:@".png"]) { // Image files
        UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"UserFiles" bundle:nil];
        UserFilesImageViewController *imageViewController = [storyboard instantiateViewControllerWithIdentifier:@"UserFilesImageViewController"];
        imageViewController.image = [UIImage imageWithData:content.cachedData];
        imageViewController.title = content.key;

        [self.navigationController pushViewController:imageViewController
                                             animated:YES];
    } else {
        [self showSimpleAlertWithTitle:@"Sorry!"
                               message:@"We can only open image, video, and sound files."
                     cancelButtonTitle:@"Okay"];
    }
}

- (void)confirmForRemovingContent:(AWSContent *)content {
    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Confirm"
                                                                             message:@"Do you want to delete the content from the server? This cannot be undone."
                                                                      preferredStyle:UIAlertControllerStyleAlert];

    __weak UserFilesViewController *weakSelf = self;
    UIAlertAction *okayAction = [UIAlertAction actionWithTitle:@"Yes"
                                                         style:UIAlertActionStyleDefault
                                                       handler:^(UIAlertAction * _Nonnull action) {
                                                           [weakSelf removeContent:content];
                                                       }];
    [alertController addAction:okayAction];

    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@"Cancel"
                                                           style:UIAlertActionStyleCancel
                                                         handler:nil];
    [alertController addAction:cancelAction];

    [self presentViewController:alertController
                       animated:YES
                     completion:nil];
}

- (void)removeContent:(AWSContent *)content {
    [content removeRemoteContentWithCompletionHandler:^(AWSContent *content, NSError *error) {
        if (error) {
            NSLog(@"Failed to delete an object from the remote server. %@", error);
            [self showSimpleAlertWithTitle:@"Error"
                                   message:@"Failed to delete an object from the remote server."
                         cancelButtonTitle:@"Okay"];
        } else {
            [self showSimpleAlertWithTitle:@"Object Deleted"
                                   message:@"The object has been deleted successfully."
                         cancelButtonTitle:@"Okay"];
            [self refreshContents];
        }
    }];
}

#pragma mark - Content uploads

- (void)showImagePicker {
    UIImagePickerController *imagePickerController = [UIImagePickerController new];
    imagePickerController.delegate = self;
    [self presentViewController:imagePickerController
                       animated:YES
                     completion:nil];
}

- (void)askForFilename:(NSData *)data {
    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"File Name"
                                                                             message:@"Please specify the file name."
                                                                      preferredStyle:UIAlertControllerStyleAlert];
    [alertController addTextFieldWithConfigurationHandler:nil];

    __weak UserFilesViewController *weakSelf = self;
    UIAlertAction *doneAction = [UIAlertAction actionWithTitle:@"Done" style:UIAlertActionStyleDefault
                                                       handler:^(UIAlertAction * _Nonnull action) {
                                                           NSString *specifiedKey = alertController.textFields.firstObject.text;
                                                           if (specifiedKey.length == 0) {
                                                               [weakSelf showSimpleAlertWithTitle:@"Error"
                                                                                          message:@"The file name cannot be empty."
                                                                                cancelButtonTitle:@"Okay"];
                                                               return;
                                                           } else {
                                                               NSString *key = [NSString stringWithFormat:@"%@%@", self.prefix, specifiedKey];
                                                               [weakSelf uploadWithData:data forKey:key];
                                                           }
                                                       }];
    [alertController addAction:doneAction];

    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@"Cancel"
                                                           style:UIAlertActionStyleCancel
                                                         handler:nil];
    [alertController addAction:cancelAction];

    [self presentViewController:alertController
                       animated:YES
                     completion:nil];
}

- (void)askForDirectoryName {
    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:@"Directory Name"
                                                                             message:@"Please specify the directory name."
                                                                      preferredStyle:UIAlertControllerStyleAlert];
    [alertController addTextFieldWithConfigurationHandler:nil];

    __weak UserFilesViewController *weakSelf = self;
    UIAlertAction *doneAction = [UIAlertAction actionWithTitle:@"Done" style:UIAlertActionStyleDefault
                                                       handler:^(UIAlertAction * _Nonnull action) {
                                                           NSString *specifiedKey = alertController.textFields.firstObject.text;
                                                           if (specifiedKey.length == 0) {
                                                               [weakSelf showSimpleAlertWithTitle:@"Error"
                                                                                          message:@"The directory name cannot be empty."
                                                                                cancelButtonTitle:@"Okay"];
                                                               return;
                                                           } else {
                                                               NSString *key = [NSString stringWithFormat:@"%@%@/", self.prefix, specifiedKey];
                                                               [weakSelf uploadWithData:nil forKey:key];
                                                           }
                                                       }];
    [alertController addAction:doneAction];

    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:@"Cancel"
                                                           style:UIAlertActionStyleCancel
                                                         handler:nil];
    [alertController addAction:cancelAction];

    [self presentViewController:alertController
                       animated:YES
                     completion:nil];
}

- (void)uploadWithData:(NSData *)data
                forKey:(NSString *)key {
    AWSLocalContent *localContent = [self.manager localContentWithData:data
                                                                   key:key];

    __weak UserFilesViewController *weakSelf = self;
    [localContent uploadWithPinOnCompletion:NO
                              progressBlock:^(AWSLocalContent *content, NSProgress *progress) {
                                  NSInteger row = [self.contents indexOfObject:content];
                                  NSIndexPath *indexPath = [NSIndexPath indexPathForRow:row
                                                                              inSection:0];
                                  [weakSelf.tableView reloadRowsAtIndexPaths:@[indexPath]
                                                            withRowAnimation:UITableViewRowAnimationNone];
                              } completionHandler:^(AWSContent *content, NSError *error) {
                                  [weakSelf updateUploadUI];
                                  if (error) {
                                      NSLog(@"Failed to upload an object. %@", error);
                                      [weakSelf showSimpleAlertWithTitle:@"Error"
                                                                 message:@"Failed to upload an object."
                                                       cancelButtonTitle:@"Okay"];
                                  } else {
                                      [weakSelf refreshContents];
                                  }
                              }];
    [self updateUploadUI];
}

- (void)updateUploadUI {
    [self.tableView reloadSections:[NSIndexSet indexSetWithIndex:0]
                  withRowAnimation:UITableViewRowAnimationAutomatic];
}

#pragma mark - UIImagePickerControllerDelegate

- (void)imagePickerController:(UIImagePickerController *)picker didFinishPickingMediaWithInfo:(NSDictionary<NSString *,id> *)info {
    [self dismissViewControllerAnimated:YES completion:nil];

    if ([@"public.image" isEqualToString:info[UIImagePickerControllerMediaType]]) {
        UIImage *image = info[UIImagePickerControllerOriginalImage];
        [self askForFilename:UIImagePNGRepresentation(image)];
    }
}

#pragma mark - UITableViewDataSource

- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView {
    return 2;
}

- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section {
    if (section == 0) {
        return [self.manager.uploadingContents count];
    }
    return [self.contents count];
}

- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath {
    if (indexPath.section == 0) {
        UserFilesUploadCell *cell = [tableView dequeueReusableCellWithIdentifier:@"UserFilesUploadCell"
                                                                    forIndexPath:indexPath];
        AWSLocalContent *localContent = self.manager.uploadingContents[indexPath.row];

        cell.prefix = self.prefix;
        cell.localContent = localContent;

        return cell;
    }

    UserFilesCell *cell = [tableView dequeueReusableCellWithIdentifier:@"UserFilesCell"
                                                          forIndexPath:indexPath];
    AWSContent *content = self.contents[indexPath.row];

    cell.prefix = self.prefix;
    cell.content = content;

    return cell;
}

- (void)tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath {
    if (indexPath.row == self.contents.count - 1) {
        if (!self.didLoadAllContents) {
            [self loadMoreContents];
        }
    }
}

#pragma mark - UITableViewDelegate

- (void)tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath {
    [tableView deselectRowAtIndexPath:indexPath
                             animated:YES];
    AWSContent *content = self.contents[indexPath.row];
    if (content.isDirectory) {
        UIStoryboard *storyboard = [UIStoryboard storyboardWithName:@"UserFiles"
                                                             bundle:nil];
        UserFilesViewController *viewController = [storyboard instantiateViewControllerWithIdentifier:@"UserFiles"];
        viewController.prefix = content.key;

        [self.navigationController pushViewController:viewController
                                             animated:YES];
    } else {
        [self showActionOptionsForContent:content];
    }
}

#pragma mark - Utility

- (void)showSimpleAlertWithTitle:(NSString *)title
                         message:(NSString *)message
               cancelButtonTitle:(NSString *)cancelTitle {
    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:title
                                                                             message:message
                                                                      preferredStyle:UIAlertControllerStyleAlert];
    UIAlertAction *cancelAction = [UIAlertAction actionWithTitle:cancelTitle
                                                           style:UIAlertActionStyleCancel
                                                         handler:nil];
    [alertController addAction:cancelAction];

    [self presentViewController:alertController
                       animated:YES
                     completion:nil];
}

@end

@implementation UserFilesCell

- (void)setContent:(AWSContent *)content {
    NSString *displayFilename = content.key;
    if (self.prefix && displayFilename.length > self.prefix.length) {
        displayFilename = [displayFilename substringFromIndex:self.prefix.length];
    }
    self.fileNameLabel.text = displayFilename;

    self.downloadedImageView.hidden = !content.isCached;
    self.keepImageView.hidden = !content.isPinned;

    NSUInteger contentByteCount = content.fileSize;
    if (contentByteCount == 0) {
        contentByteCount = content.knownRemoteByteCount;
    }
    if (content.isDirectory) {
        self.detailLabel.text = @"This is a folder";
        self.accessoryType = UITableViewCellAccessoryDisclosureIndicator;
    } else {
        self.detailLabel.text = [NSString aws_stringFromByteCount:contentByteCount];
        self.accessoryType = UITableViewCellAccessoryNone;
    }
    if ([content.knownRemoteLastModifiedDate compare:content.downloadedDate] == NSOrderedDescending) {
        self.detailLabel.text = [NSString stringWithFormat:@"%@ - New Version Available", self.detailLabel.text];
        self.detailLabel.textColor = [UIColor blueColor];
    } else {
        self.detailLabel.textColor = [UIColor blackColor];
    }

    if (content.status == AWSContentStatusTypeRunning) {
        self.progressView.progress = content.progress.fractionCompleted;
        self.progressView.hidden = NO;
    } else {
        self.progressView.hidden = YES;
    }
}

@end

@implementation UserFilesImageViewController

- (void)viewWillAppear:(BOOL)animated {
    [super viewWillAppear:animated];

    self.imageView.image = self.image;
}

@end

@implementation NSString (AWSUserFilesViewController)

+ (NSString *)aws_stringFromByteCount:(NSUInteger)byteCount {
    if (byteCount < 1024) {
        return [NSString stringWithFormat:@"%lu B", (unsigned long)byteCount];
    }
    if (byteCount < 1024 * 1024) {
        return [NSString stringWithFormat:@"%lu KB", (unsigned long)byteCount / 1024];
    }
    if (byteCount < 1024 * 1024 * 1024) {
        return [NSString stringWithFormat:@"%lu MB", (unsigned long)byteCount / 1024 / 1024];
    }
    return [NSString stringWithFormat:@"%lu GB", (unsigned long)byteCount / 1024 / 1024 / 1024];
}

@end

@implementation UserFilesUploadCell

- (void)setLocalContent:(AWSLocalContent *)localContent {
    NSString *displayFilename = localContent.key;
    if (self.prefix) {
        displayFilename = [displayFilename substringFromIndex:self.prefix.length];
    }
    self.fileNameLabel.text = displayFilename;
    self.progressView.progress = localContent.progress.fractionCompleted;
}

@end
