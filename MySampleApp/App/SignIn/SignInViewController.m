//
//  SignInViewController.m
//  MySampleApp
//
//
// Copyright 2015 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//

//
#import <Foundation/Foundation.h>
#import "MainViewController.h"
#import "SignInViewController.h"
#import <AWSCore/AWSCore.h>
#import "AWSIdentityManager.h"
#import "ApiHelper.h"
#import "RegisterViewController.h"


static NSString *LOG_TAG;

@interface SignInViewController ()

@property (nonatomic, strong) id didSignInObserver;

@end

@implementation SignInViewController

+ (void)initialize {
    [super initialize];
    LOG_TAG = NSStringFromClass(self);
}

#pragma mark - UIViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    NSLog(@"%@: Sign-In Loading.", LOG_TAG);

    __weak SignInViewController *weakSelf = self;
    self.didSignInObserver =[[NSNotificationCenter defaultCenter] addObserverForName:AWSIdentityManagerDidSignInNotification
                                                                              object:[AWSIdentityManager sharedInstance]
                                                                               queue:[NSOperationQueue mainQueue]
                                                                          usingBlock:^(NSNotification * _Nonnull note) {
                                                                              [weakSelf.presentingViewController dismissViewControllerAnimated:YES
                                                                                                                                    completion:nil];
                                                                          }];
        // FACEBOOK UI SETUP
        [self.facebookButton addTarget:self
                                action:@selector(handleFacebookLogin)
                      forControlEvents:UIControlEventTouchUpInside];
        UIImage *facebookButtonImage = [UIImage imageNamed:@"FacebookButton"];
        if (facebookButtonImage) {
            [self.facebookButton setImage:facebookButtonImage
                                 forState:UIControlStateNormal];
        } else {
            NSLog(@"%@: Facebook button image unavailable. We're hiding this button.", LOG_TAG);
            self.facebookButton.hidden = YES;
        }

        [self.view addConstraint:[NSLayoutConstraint constraintWithItem:self.facebookButton
                                                              attribute:NSLayoutAttributeTop
                                                              relatedBy:NSLayoutRelationEqual
                                                                 toItem:[self anchorViewForFacebook]
                                                              attribute:NSLayoutAttributeBottom
                                                             multiplier:1
                                                               constant:8.0]];
        [self.googleButton removeFromSuperview];
        // CUSTOM UI SETUP
        [self.customProviderButton addTarget:self
                                      action:@selector(handleCustomLogin)
                            forControlEvents:UIControlEventTouchUpInside];
    
        [self.customForgotPasswordButton addTarget:self
                                            action:@selector(showDemoAlert)
                                  forControlEvents:UIControlEventTouchUpInside];

        [self.customProviderButton setImage:[UIImage imageNamed:@"LoginButton"]
                                   forState:UIControlStateNormal];
}

- (void)viewWillAppear:(BOOL)animated {
    NSUserDefaults *defaults = [NSUserDefaults standardUserDefaults];
    if ([defaults objectForKey:@"registered"]) {
        [self.presentingViewController dismissViewControllerAnimated:YES completion:nil];
        [defaults removeObjectForKey:@"registered"];
    }
}

- (void)dealloc {
    [[NSNotificationCenter defaultCenter] removeObserver:self.didSignInObserver];
}

#pragma mark - Utility Methods

- (void)handleLoginWithSignInProvider:(AWSSignInProviderType)signInProviderType {
    [[AWSIdentityManager sharedInstance] loginWithSignInProvider:signInProviderType
                                               completionHandler:^(id result, NSError *error) {
                                                   if (!error) {
                                                       dispatch_async(dispatch_get_main_queue(), ^{
                                                               [self.parentViewController dismissViewControllerAnimated:YES
                                                                                                             completion:nil];
                                                       });
                                                   }
                                                   NSLog(@"result = %@, error = %@", result, error);
                                               }];
}

- (void)showErrorDialog:(NSString *)loginProviderName withError:(const NSError *)error {
    NSLog(@"%@: %@ failed to sign in w/ error: %@", LOG_TAG, loginProviderName, error);

    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"Sign-in Provider Sign-In Error", @"Sign-in error for sign-in failure.")
                                                                             message:NSLocalizedString(@"%@ failed to sign in w/ error: %@", @"Sign-in message structure for sign-in failure.")
                                                                      preferredStyle:UIAlertControllerStyleAlert];
    UIAlertAction *doneAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"Cancel", @"Label to cancel sign-in failure.")
                                                         style:UIAlertActionStyleCancel
                                                       handler:nil];
    [alertController addAction:doneAction];

    [self presentViewController:alertController
                       animated:YES
                     completion:nil];
}

#pragma mark - IBActions

- (void)handleFacebookLogin {
    [self handleLoginWithSignInProvider:AWSSignInProviderTypeFacebook];
}
- (void)handleCustomLogin {
    NSString *data = [NSString stringWithFormat:@"?email=%@&pass=%@",self.customUserIdField.text,self.customPasswordField.text];
    NSString *url = [NSString stringWithFormat:@"%@",data];
    [ApiHelper connectionWithUrl:url PostString:nil
                      HttpMethod:@"GET"
                         success:^(NSData *data, NSURLResponse *response) {
                             NSError *error;
                             NSDictionary *APIResponseDictionary = data ? [NSJSONSerialization JSONObjectWithData:data options:NSJSONReadingMutableContainers | NSJSONReadingMutableLeaves error:&error]:nil;
                             if(error){
                                 [self showErrorDialog:@"Wrong response" withError:error];
                             } else {
                                 
                                 // check for success key
                                 NSLog(@"%@", APIResponseDictionary);
                                 //
                                 [self.parentViewController dismissViewControllerAnimated:YES
                                                                               completion:nil];
                             }
                         }
                         failure:^(NSData *data, NSError *connectionError) {
                             [self showErrorDialog:@"Couldn't connect" withError:connectionError];
                             
    }];
}

- (IBAction)CreateNewAccount:(UIButton *)sender {
    [self SegueToRegister];
}

- (void)SegueToRegister {
    RegisterViewController *registerCont = [[RegisterViewController alloc] initWithNibName:nil bundle:nil];
    [self presentViewController:registerCont animated:YES completion:nil];
}

- (void)showDemoAlert {
    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"Custom Sign-In Demo", @"Label for custom sign-in dialog.")
                                                                             message:NSLocalizedString(@"This feature do not work yet.", @"Sign-in message structure for custom sign-in stub.")
                                                                      preferredStyle:UIAlertControllerStyleAlert];
    UIAlertAction *doneAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"Done", @"Label to complete stubbed custom sign-in.")
                                                         style:UIAlertActionStyleCancel
                                                       handler:nil];
    [alertController addAction:doneAction];
    
    [self presentViewController:alertController
                       animated:YES
                     completion:nil];
}

- (UIView *)anchorViewForFacebook {
        return self.orSignInWithLabel;

    return self.anchorView;
}


@end
